/*
bcrypt = Promise.promisifyAll(require('bcrypt-nodejs'))
crypto = Promise.promisifyAll require 'crypto'
Mail = Promise.promisifyAll require '../../services/mail'
*/


const crypto = require('crypto');
const {promisify} = require('util');
const moment = require('moment');

module.exports = function(bookshelf) {
  global.Token = bookshelf.Model.extend({
    tableName: 'tokens',
    hasTimestamps: true,
    visible: ['random_key', 'created_at'],
    virtuals: {
      key: function() {
        return this.unhashedKey;
      }
    },
    initialize: function() {
      return this.on('creating', async function(model, attrs, options) {
        await model.generateToken(null);
        logger.info('token created');
        return null;//Promise.resolve('token created');
      });
    },
    tokenable: function() {
      return this.morphTo('tokenable', User);
    },
    generateToken: async function(length) {
      length || (length = 48);
      console.log('generating token with length', length);
      let buf = await promisify(crypto.randomBytes)(length);
      let key = buf.toString("hex");
      logger.log('verbose', 'token key generated ', key);
      //this.unhashedKey = key;
      this.set('random_key', key);  //cant use the word key, it's reserved.  Spent two hours on that one >_<
      logger.log('verbose', 'token attrs after key set are  ', this);

    },
    expired: function(timeLength, timeUnits) {
      if (moment().subtract(timeLength, timeUnits).isAfter(this.get('createdAt'))) {
        return true;
      } else {
        return false;
      }
    }

    /*
toJSON: ->
  key: @get('key')
*/
  }, {
    hash: function(unhashed) {
      return crypto.createHash('sha512').update(unhashed).digest("hex");
    },
    hashAndForge: function(unhashedKey, type) {
      var hashedKey;
      hashedKey = this.hash(unhashedKey);
      return this.forge({
        hashed_key: hashedKey,
        type: type
      });
    }
  });
  return Token;
};

// ---
// generated by coffee-script 1.9.2